#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞ FAISS
–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ runtime –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–µ–∑ –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î:
- nprobe (–¥–ª—è IVF –∏–Ω–¥–µ–∫—Å–æ–≤)
- efSearch (–¥–ª—è HNSW –∏–Ω–¥–µ–∫—Å–æ–≤)
"""

import os
import yaml
import mlflow
import subprocess
import tempfile
import json
from optuna import create_study, Trial
from optuna.samplers import TPESampler
import sys

def load_config(config_path: str):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    with open(config_path, 'r', encoding='utf-8') as f:
        return yaml.safe_load(f)

def objective(trial: Trial, base_config_path: str) -> float:
    """–¶–µ–ª–µ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞ FAISS"""
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    nprobe = trial.suggest_int('nprobe', 1, 50, step=1)
    efSearch = trial.suggest_int('efSearch', 50, 500, step=50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = load_config(base_config_path)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
    config['vector_store']['nprobe'] = nprobe
    config['vector_store']['efSearch'] = efSearch
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    with tempfile.NamedTemporaryFile(mode='w', suffix='.yaml', delete=False) as f:
        yaml.dump(config, f, default_flow_style=False, allow_unicode=True)
        temp_config_path = f.name
    
    try:
        # –ù–ï —É–¥–∞–ª—è–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ë–î - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é!
        # –¢–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –ë–ï–ó –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î
        result = subprocess.run([
            'python', 'test_rag.py',
            '--config', temp_config_path,
            '--max-samples', '100'
            # –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º --rebuild-vector-db!
        ], capture_output=True, text=True, timeout=120)  # –ë—ã—Å—Ç—Ä—ã–π —Ç–∞–π–º–∞—É—Ç
        
        if result.returncode != 0:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ trial {trial.number}: {result.stderr}")
            return 0.0
        
        # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ stdout
        output_lines = result.stdout.splitlines()
        metrics = {}
        for line in output_lines:
            if "MLflow Metrics:" in line:
                try:
                    metrics_str = line.split("MLflow Metrics:")[1].strip()
                    metrics = json.loads(metrics_str)
                    break
                except json.JSONDecodeError:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –º–µ—Ç—Ä–∏–∫ –≤ trial {trial.number}")
                    continue
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ stdout, –∏—â–µ–º –≤ stderr
        if not metrics:
            error_lines = result.stderr.splitlines()
            for line in error_lines:
                if "MLflow Metrics:" in line:
                    try:
                        metrics_str = line.split("MLflow Metrics:")[1].strip()
                        metrics = json.loads(metrics_str)
                        break
                    except json.JSONDecodeError:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –º–µ—Ç—Ä–∏–∫ –≤ trial {trial.number}")
                        continue
        
        if not metrics:
            print(f"‚ùå –ú–µ—Ç—Ä–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –≤—ã–≤–æ–¥–µ test_rag.py –¥–ª—è trial {trial.number}")
            return 0.0
        
        # –í—ã—á–∏—Å–ª—è–µ–º objective score (—Ñ–æ–∫—É—Å –Ω–∞ –º–µ—Ç—Ä–∏–∫–∞—Ö —Ä–µ—Ç—Ä–∏–≤–µ—Ä–∞)
        objective_score = (
            metrics.get('retriever_f1_mean', 0.0) + 
            metrics.get('retriever_mrr_mean', 0.0) + 
            metrics.get('retriever_ndcg_mean', 0.0)
        ) / 3
        
        # –õ–æ–≥–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤ MLflow
        with mlflow.start_run(run_name=f"trial_{trial.number}", nested=True):
            mlflow.log_params({
                'nprobe': nprobe,
                'efSearch': efSearch,
                'rebuild_vector_db': False,
                'optimization_type': 'search_parameters_only'
            })
            mlflow.log_metrics({
                'objective_score': objective_score,
                'retriever_precision': metrics.get('retriever_precision_mean', 0.0),
                'retriever_recall': metrics.get('retriever_recall_mean', 0.0),
                'retriever_f1': metrics.get('retriever_f1_mean', 0.0),
                'retriever_hit_rate': metrics.get('retriever_hit_rate_mean', 0.0),
                'retriever_mrr': metrics.get('retriever_mrr_mean', 0.0),
                'retriever_ndcg': metrics.get('retriever_ndcg_mean', 0.0),
                'retrieval_time': metrics.get('retrieval_time_mean', 0.0),
                'response_time': metrics.get('response_time_mean', 0.0),
                'generation_time': metrics.get('generation_time_mean', 0.0)
            })
        
        print(f"‚úÖ Trial {trial.number}: nprobe={nprobe}, efSearch={efSearch}, objective_score = {objective_score:.4f}")
        return objective_score
        
    except subprocess.TimeoutExpired:
        print(f"‚ùå Trial {trial.number} timed out after 120 seconds.")
        return 0.0
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ trial {trial.number}: {e}")
        return 0.0
    finally:
        os.unlink(temp_config_path)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º MLflow
    mlflow.set_tracking_uri("file:./mlruns")
    mlflow.set_experiment("FAISS_Search_Parameters_Optimization")
    
    print("üöÄ –ë—ã—Å—Ç—Ä–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞ FAISS")
    print("üìä –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç: FAISS_Search_Parameters_Optimization")
    print("üéØ –°—ç–º–ø–ª—ã: 100")
    print("üîß –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: nprobe, efSearch")
    print("‚ö†Ô∏è  –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î: –ù–ï–¢")
    print("‚è±Ô∏è  –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è: ~10 –º–∏–Ω—É—Ç")
    print()
    
    # –°–æ–∑–¥–∞–µ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
    study = create_study(
        direction='maximize',
        sampler=TPESampler(seed=42)
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
    with mlflow.start_run(run_name="FAISS_Search_Parameters_Optimization"):
        mlflow.log_param("max_samples", 100)
        mlflow.log_param("rebuild_vector_db", False)
        mlflow.log_param("optimization_target", "faiss_search_parameters")
        mlflow.log_param("optimization_type", "search_parameters_only")
        
        study.optimize(
            lambda trial: objective(trial, "config/faiss_search_optimization.yaml"),
            n_trials=5,  # –ú–µ–Ω—å—à–µ –∏—Ç–µ—Ä–∞—Ü–∏–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            timeout=600  # 10 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ª—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        best_trial = study.best_trial
        mlflow.log_metric('best_objective_score', best_trial.value)
        mlflow.log_params(best_trial.params)
        
        print("\nüèÜ –õ—É—á—à–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞:")
        print(f"  Objective Score: {best_trial.value:.4f}")
        for key, value in best_trial.params.items():
            print(f"  {key}: {value}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª—É—á—à–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        best_params = best_trial.params.copy()
        best_params['objective_score'] = best_trial.value
        
        with open('best_search_params.json', 'w') as f:
            json.dump(best_params, f, indent=2)
        
        print(f"\nüíæ –õ—É—á—à–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ best_search_params.json")
        print("üéâ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print(f"\nüìä –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        print(f"  –õ—É—á—à–∏–π objective score: {best_trial.value:.4f}")
        print(f"  –õ—É—á—à–∏–π nprobe: {best_trial.params['nprobe']}")
        print(f"  –õ—É—á—à–∏–π efSearch: {best_trial.params['efSearch']}")
        print(f"  –í—Å–µ–≥–æ trials: {len(study.trials)}")

if __name__ == "__main__":
    main()
