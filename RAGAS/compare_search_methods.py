#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –æ–±—ã—á–Ω–æ–≥–æ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞.
–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ–≤–µ—Å—Ç–∏ A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å—Ä–∞–≤–Ω–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏.
"""

import argparse
import logging
import json
import time
from pathlib import Path
from typing import Dict, Any, List

import yaml
import numpy as np
import mlflow
import mlflow.sklearn
from mlflow.tracking import MlflowClient

from src.evaluation import RAGEvaluator
from src.dataset_loader import DatasetLoader
from src.pipeline import RAGPipeline

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


def load_config(config_path: str) -> Dict[str, Any]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ YAML —Ñ–∞–π–ª–∞."""
    with open(config_path, 'r', encoding='utf-8') as f:
        return yaml.safe_load(f)


def create_comparison_config(base_config: Dict[str, Any], search_type: str) -> Dict[str, Any]:
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞."""
    config = base_config.copy()
    config['retriever']['search_type'] = search_type
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞
    if search_type == "hybrid":
        config['mlflow']['experiment_name'] = "RAG_Hybrid_Search_Comparison"
    else:
        config['mlflow']['experiment_name'] = "RAG_Semantic_Search_Comparison"
    
    return config


def run_experiment(config: Dict[str, Any], max_samples: int, search_type: str) -> Dict[str, Any]:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç —Å –∑–∞–¥–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π."""
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞: {search_type} –ø–æ–∏—Å–∫")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MLflow
    mlflow.set_experiment(config['mlflow']['experiment_name'])
    
    with mlflow.start_run(run_name=f"{search_type}_search_{int(time.time())}"):
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        mlflow.log_params({
            'search_type': search_type,
            'max_samples': max_samples,
            'semantic_weight': config.get('hybrid_search', {}).get('semantic_weight', 'N/A'),
            'bm25_weight': config.get('hybrid_search', {}).get('bm25_weight', 'N/A'),
            'final_k': config.get('hybrid_search', {}).get('final_k', config['retriever']['k']),
            'embedding_model': config['models']['embedding']['name'],
            'generator_model': config['models']['generator']['name']
        })
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–π–ø–ª–∞–π–Ω–∞
        pipeline = RAGPipeline(config)
        pipeline.initialize()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞–π–ø–ª–∞–π–Ω –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        if not hasattr(pipeline, 'retriever') or pipeline.retriever is None:
            logger.error("RAG –ø–∞–π–ø–ª–∞–π–Ω –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            raise RuntimeError("RAG –ø–∞–π–ø–ª–∞–π–Ω –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞
        dataset_loader = DatasetLoader(config)
        dataset_path = config['datasets']['sberquad']['path']
        qa_pairs_path = Path(dataset_path) / config['datasets']['sberquad']['qa_pairs_file']
        
        with open(qa_pairs_path, 'r', encoding='utf-8') as f:
            qa_pairs = json.load(f)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤
        if max_samples > 0:
            qa_pairs = qa_pairs[:max_samples]
        
        logger.info(f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ {len(qa_pairs)} –ø—Ä–∏–º–µ—Ä–∞—Ö")
        
        # –û—Ü–µ–Ω–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞
        evaluator = RAGEvaluator(config)
        results = evaluator.evaluate_pipeline(pipeline, qa_pairs)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏
        for metric_name, value in results['metrics'].items():
            if isinstance(value, (int, float)):
                mlflow.log_metric(metric_name, value)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results_file = f"results/{search_type}_search_results.json"
        Path("results").mkdir(exist_ok=True)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º NumPy —Ç–∏–ø—ã –¥–ª—è JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        def convert_numpy_types(obj):
            if isinstance(obj, np.integer):
                return int(obj)
            elif isinstance(obj, np.floating):
                return float(obj)
            elif isinstance(obj, np.ndarray):
                return obj.tolist()
            elif isinstance(obj, dict):
                return {key: convert_numpy_types(value) for key, value in obj.items()}
            elif isinstance(obj, list):
                return [convert_numpy_types(item) for item in obj]
            return obj
        
        results_converted = convert_numpy_types(results)
        
        with open(results_file, 'w', encoding='utf-8') as f:
            json.dump(results_converted, f, ensure_ascii=False, indent=2)
        
        mlflow.log_artifact(results_file)
        
        logger.info(f"‚úÖ –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç {search_type} –∑–∞–≤–µ—Ä—à–µ–Ω")
        return results


def compare_results(semantic_results: Dict[str, Any], hybrid_results: Dict[str, Any]) -> Dict[str, Any]:
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–≤—É—Ö —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤."""
    comparison = {
        'semantic_search': semantic_results['metrics'],
        'hybrid_search': hybrid_results['metrics'],
        'improvements': {}
    }
    
    # –í—ã—á–∏—Å–ª—è–µ–º —É–ª—É—á—à–µ–Ω–∏—è
    for metric_name in semantic_results['metrics']:
        if metric_name in hybrid_results['metrics']:
            semantic_value = semantic_results['metrics'][metric_name]
            hybrid_value = hybrid_results['metrics'][metric_name]
            
            if isinstance(semantic_value, (int, float)) and isinstance(hybrid_value, (int, float)):
                if semantic_value != 0:
                    improvement = ((hybrid_value - semantic_value) / semantic_value) * 100
                else:
                    improvement = 100 if hybrid_value > 0 else 0
                
                comparison['improvements'][metric_name] = {
                    'semantic': semantic_value,
                    'hybrid': hybrid_value,
                    'improvement_percent': improvement,
                    'improvement_absolute': hybrid_value - semantic_value
                }
    
    return comparison


def print_comparison(comparison: Dict[str, Any]):
    """–í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ."""
    print("\n" + "="*80)
    print("üìä –°–†–ê–í–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í: –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–ò–ô vs –ì–ò–ë–†–ò–î–ù–´–ô –ü–û–ò–°–ö")
    print("="*80)
    
    print(f"\nüîç –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫:")
    for metric, value in comparison['semantic_search'].items():
        if isinstance(value, (int, float)):
            print(f"  {metric}: {value:.4f}")
    
    print(f"\nüîç –ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫:")
    for metric, value in comparison['hybrid_search'].items():
        if isinstance(value, (int, float)):
            print(f"  {metric}: {value:.4f}")
    
    print(f"\nüìà –£–õ–£–ß–®–ï–ù–ò–Ø:")
    print("-" * 80)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø–æ —Ä–∞–∑–º–µ—Ä—É —É–ª—É—á—à–µ–Ω–∏—è
    improvements = comparison['improvements']
    sorted_improvements = sorted(
        improvements.items(), 
        key=lambda x: abs(x[1]['improvement_percent']), 
        reverse=True
    )
    
    for metric, data in sorted_improvements:
        improvement = data['improvement_percent']
        absolute = data['improvement_absolute']
        
        if improvement > 0:
            emoji = "üìà"
            direction = "—É–ª—É—á—à–µ–Ω–∏–µ"
        elif improvement < 0:
            emoji = "üìâ"
            direction = "—É—Ö—É–¥—à–µ–Ω–∏–µ"
        else:
            emoji = "‚û°Ô∏è"
            direction = "–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π"
        
        print(f"  {emoji} {metric}: {improvement:+.1f}% ({absolute:+.4f}) - {direction}")
    
    # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é –æ—Ü–µ–Ω–∫—É
    positive_improvements = sum(1 for data in improvements.values() if data['improvement_percent'] > 0)
    total_metrics = len(improvements)
    
    print(f"\nüéØ –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê:")
    print(f"  –£–ª—É—á—à–µ–Ω–æ –º–µ—Ç—Ä–∏–∫: {positive_improvements}/{total_metrics} ({positive_improvements/total_metrics*100:.1f}%)")
    
    if positive_improvements > total_metrics / 2:
        print("  ‚úÖ –ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!")
    elif positive_improvements < total_metrics / 2:
        print("  ‚ùå –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
    else:
        print("  ‚öñÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–∏–º–µ—Ä–Ω–æ —Ä–∞–≤–Ω—ã")


def main():
    parser = argparse.ArgumentParser(description="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞")
    parser.add_argument("--config", default="config/hybrid_cpu_config.yaml", 
                       help="–ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É")
    parser.add_argument("--max-samples", type=int, default=50,
                       help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    parser.add_argument("--semantic-only", action="store_true",
                       help="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫")
    parser.add_argument("--hybrid-only", action="store_true",
                       help="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫")
    
    args = parser.parse_args()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    base_config = load_config(args.config)
    
    results = {}
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫
    if not args.hybrid_only:
        logger.info("üîç –ó–∞–ø—É—Å–∫ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞...")
        semantic_config = create_comparison_config(base_config, "similarity")
        results['semantic'] = run_experiment(semantic_config, args.max_samples, "semantic")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫
    if not args.semantic_only:
        logger.info("üîç –ó–∞–ø—É—Å–∫ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞...")
        hybrid_config = create_comparison_config(base_config, "hybrid")
        results['hybrid'] = run_experiment(hybrid_config, args.max_samples, "hybrid")
    
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if 'semantic' in results and 'hybrid' in results:
        comparison = compare_results(results['semantic'], results['hybrid'])
        print_comparison(comparison)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
        comparison_file = "results/search_comparison.json"
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º NumPy —Ç–∏–ø—ã –¥–ª—è JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        def convert_numpy_types(obj):
            if isinstance(obj, np.integer):
                return int(obj)
            elif isinstance(obj, np.floating):
                return float(obj)
            elif isinstance(obj, np.ndarray):
                return obj.tolist()
            elif isinstance(obj, dict):
                return {key: convert_numpy_types(value) for key, value in obj.items()}
            elif isinstance(obj, list):
                return [convert_numpy_types(item) for item in obj]
            return obj
        
        comparison_converted = convert_numpy_types(comparison)
        
        with open(comparison_file, 'w', encoding='utf-8') as f:
            json.dump(comparison_converted, f, ensure_ascii=False, indent=2)
        
        logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {comparison_file}")
    
    logger.info("‚úÖ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    logger.info("üìà –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ MLflow UI: mlflow ui --backend-store-uri file:./mlruns")


if __name__ == "__main__":
    main()
