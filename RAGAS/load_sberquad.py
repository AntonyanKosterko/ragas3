#!/usr/bin/env python3
"""
–ó–∞–≥—Ä—É–∑—á–∏–∫ –¥–∞—Ç–∞—Å–µ—Ç–∞ SberQuAD –¥–ª—è RAG —Å–∏—Å—Ç–µ–º—ã
"""

import os
import json
import logging
from datasets import load_dataset
from typing import List, Dict, Any

logger = logging.getLogger(__name__)


def load_sberquad_dataset():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞—Ç–∞—Å–µ—Ç SberQuAD —Å Hugging Face"""
    print("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞ SberQuAD...")
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞—Ç–∞—Å–µ—Ç
        dataset = load_dataset("kuznetsoffandrey/sberquad")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥–∞—Ç–∞—Å–µ—Ç–∞
        os.makedirs("datasets/sberquad", exist_ok=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º train split
        train_data = dataset['train']
        train_data.to_json("datasets/sberquad/train.json")
        
        print(f"‚úÖ –î–∞—Ç–∞—Å–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω: {len(train_data)} –ø—Ä–∏–º–µ—Ä–æ–≤")
        print(f"üìÅ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤: datasets/sberquad/")
        
        return dataset
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞—Ç–∞—Å–µ—Ç–∞: {e}")
        return None


def create_documents_from_sberquad(dataset, max_documents=500):
    """–°–æ–∑–¥–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è RAG –∏–∑ –¥–∞—Ç–∞—Å–µ—Ç–∞ SberQuAD"""
    print(f"üìÑ –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è RAG (–º–∞–∫—Å–∏–º—É–º {max_documents})...")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã
    contexts = {}
    processed = 0
    
    for item in dataset['train']:
        if len(contexts) >= max_documents:
            break
            
        context = item['context']
        context_id = f"context_{hash(context) % 10000}"
        
        if context_id not in contexts:
            contexts[context_id] = {
                'id': context_id,
                'title': f"–ö–æ–Ω—Ç–µ–∫—Å—Ç {context_id}",
                'content': context,
                'source': 'sberquad',
                'type': 'context'
            }
        
        processed += 1
        if processed % 1000 == 0:
            print(f"  –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed} –ø—Ä–∏–º–µ—Ä–æ–≤, –Ω–∞–π–¥–µ–Ω–æ {len(contexts)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤...")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
    documents = list(contexts.values())
    with open("datasets/sberquad/documents_for_rag.json", "w", encoding="utf-8") as f:
        json.dump(documents, f, ensure_ascii=False, indent=2)
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(documents)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ {processed} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤")
    return documents


def create_qa_pairs_from_sberquad(dataset, max_samples=None):
    """–°–æ–∑–¥–∞–µ—Ç –ø–∞—Ä—ã –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç –∏–∑ –¥–∞—Ç–∞—Å–µ—Ç–∞ SberQuAD"""
    print("‚ùì –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç...")
    
    qa_pairs = []
    train_data = dataset['train']
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if max_samples:
        train_data = train_data.select(range(min(max_samples, len(train_data))))
    
    for i, item in enumerate(train_data):
        qa_pair = {
            'id': f"qa_{i}",
            'question': item['question'],
            'answer': item['answers']['text'][0] if item['answers']['text'] else "",
            'context_doc_ids': [f"context_{hash(item['context']) % 10000}"],
            'difficulty': 'medium'  # SberQuAD –Ω–µ –∏–º–µ–µ—Ç –º–µ—Ç–∫–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        }
        qa_pairs.append(qa_pair)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º QA –ø–∞—Ä—ã
    with open("datasets/sberquad/qa_pairs.json", "w", encoding="utf-8") as f:
        json.dump(qa_pairs, f, ensure_ascii=False, indent=2)
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(qa_pairs)} –ø–∞—Ä –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç")
    return qa_pairs


def analyze_sberquad_dataset(dataset):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞—Ç–∞—Å–µ—Ç SberQuAD"""
    print("\nüìä –ê–Ω–∞–ª–∏–∑ –¥–∞—Ç–∞—Å–µ—Ç–∞ SberQuAD:")
    print("=" * 50)
    
    train_data = dataset['train']
    print(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤: {len(train_data)}")
    
    # –ê–Ω–∞–ª–∏–∑ –¥–ª–∏–Ω—ã –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤
    question_lengths = [len(item['question']) for item in train_data]
    answer_lengths = [len(item['answers']['text'][0]) if item['answers']['text'] else 0 for item in train_data]
    context_lengths = [len(item['context']) for item in train_data]
    
    print(f"–í–æ–ø—Ä–æ—Å—ã - –º–∏–Ω: {min(question_lengths)}, –º–∞–∫—Å: {max(question_lengths)}, —Å—Ä–µ–¥–Ω–µ–µ: {sum(question_lengths)/len(question_lengths):.1f}")
    print(f"–û—Ç–≤–µ—Ç—ã - –º–∏–Ω: {min(answer_lengths)}, –º–∞–∫—Å: {max(answer_lengths)}, —Å—Ä–µ–¥–Ω–µ–µ: {sum(answer_lengths)/len(answer_lengths):.1f}")
    print(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç—ã - –º–∏–Ω: {min(context_lengths)}, –º–∞–∫—Å: {max(context_lengths)}, —Å—Ä–µ–¥–Ω–µ–µ: {sum(context_lengths)/len(context_lengths):.1f}")
    
    # –ü—Ä–∏–º–µ—Ä—ã
    print("\nüìù –ü—Ä–∏–º–µ—Ä—ã –∏–∑ –¥–∞—Ç–∞—Å–µ—Ç–∞:")
    for i in range(min(3, len(train_data))):
        item = train_data[i]
        print(f"\n--- –ü—Ä–∏–º–µ—Ä {i+1} ---")
        print(f"–í–æ–ø—Ä–æ—Å: {item['question']}")
        print(f"–û—Ç–≤–µ—Ç: {item['answers']['text'][0] if item['answers']['text'] else '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞'}")
        print(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: {item['context'][:200]}...")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞ SberQuAD"""
    print("üöÄ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞ SberQuAD –¥–ª—è RAG —Å–∏—Å—Ç–µ–º—ã")
    print("=" * 60)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞—Ç–∞—Å–µ—Ç
    dataset = load_sberquad_dataset()
    if not dataset:
        return
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞—Ç–∞—Å–µ—Ç
    analyze_sberquad_dataset(dataset)
    
    # –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è RAG (—É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ 2000 –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞)
    documents = create_documents_from_sberquad(dataset, max_documents=2000)
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—ã –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç (—É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ 500 –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    qa_pairs = create_qa_pairs_from_sberquad(dataset, max_samples=500)
    
    print("\n‚úÖ –î–∞—Ç–∞—Å–µ—Ç SberQuAD –≥–æ—Ç–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ RAG —Å–∏—Å—Ç–µ–º–µ!")
    print(f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(documents)}")
    print(f"‚ùì –í–æ–ø—Ä–æ—Å–æ–≤-–æ—Ç–≤–µ—Ç–æ–≤: {len(qa_pairs)}")
    print("üìÅ –í—Å–µ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: datasets/sberquad/")


if __name__ == "__main__":
    main()
