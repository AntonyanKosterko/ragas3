#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã RAG —Å–∏—Å—Ç–µ–º—ã.
"""

import sys
import os
sys.path.append('src')

from src.pipeline import create_rag_pipeline
import yaml

def test_rag_system():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å RAG —Å–∏—Å—Ç–µ–º—ã."""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RAG —Å–∏—Å—Ç–µ–º—ã...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    with open('config/base_config.yaml', 'r', encoding='utf-8') as f:
        config = yaml.safe_load(f)
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–π–ø–ª–∞–π–Ω
    print("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ RAG –ø–∞–π–ø–ª–∞–π–Ω–∞...")
    pipeline = create_rag_pipeline(config)
    pipeline.initialize()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    test_questions = [
        "–ß—Ç–æ —Ç–∞–∫–æ–µ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ?",
        "–ö–∞–∫–∏–µ —Ç–∏–ø—ã –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π —Å—É—â–µ—Å—Ç–≤—É—é—Ç?",
        "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Å–ø—É—Å–∫?"
    ]
    
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤:")
    for i, question in enumerate(test_questions, 1):
        print(f"\n{i}. –í–æ–ø—Ä–æ—Å: {question}")
        try:
            result = pipeline.query(question)
            print(f"   –û—Ç–≤–µ—Ç: {result['answer'][:200]}...")
            print(f"   –í—Ä–µ–º—è: {result['response_time']:.2f} —Å–µ–∫")
            print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(result.get('source_documents', []))}")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = pipeline.get_stats()
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞:")
    print(f"   –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['total_queries']}")
    print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {stats['avg_response_time']:.2f} —Å–µ–∫")
    
    print("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")

if __name__ == "__main__":
    test_rag_system()

