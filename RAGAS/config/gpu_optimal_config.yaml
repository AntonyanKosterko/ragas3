# Оптимальная конфигурация для RTX 3090 (24GB VRAM) с сильными моделями
experiment:
  name: "sberquad_Saiga-7B_GPU_GROUPED_metrics_experiment"
  description: "RAG система с Saiga-7B на GPU, группированные метрики: классические + RAG-специфичные, 100 семплов"
  tags: ["rag", "gpu", "Saiga-7B", "sberquad", "rtx3090", "grouped_metrics", "bleu_rouge_rag", "100_samples"]

# Настройки данных - используем датасет SberQuAD с правильными ответами
data:
  input_path: "datasets/sberquad/documents_for_rag.json"  # Документы SberQuAD
  dataset_path: "datasets/sberquad/qa_pairs.json"  # Правильные пары вопрос-ответ
  chunk_size: 2000  # Увеличиваем размер чанков для лучшего контекста
  chunk_overlap: 400
  text_splitter: "recursive"

# Настройки датасетов
datasets:
  sberquad:
    path: "datasets/sberquad"
    documents_file: "documents_for_rag.json"
    qa_pairs_file: "qa_pairs.json"
    vector_db_path: "datasets/sberquad/vector_db"

# Настройки моделей для RTX 3090 (сильные модели)
models:
  # Эмбеддинг модель (самая мощная многоязычная)
  embedding:
    name: "sentence-transformers/paraphrase-multilingual-mpnet-base-v2"
    device: "cuda"  # Возвращаем на GPU для максимального использования
    normalize_embeddings: true
    
  # Генеративная модель (Saiga-7B для максимального использования GPU)
  generator:
    name: "IlyaGusev/saiga_llama3_8b"  # Мощная модель Saiga-7B
    device: "cuda"
    torch_dtype: "float16"  # Экономия памяти
    max_new_tokens: 30  # Очень короткие ответы
    temperature: 0.7  # Оптимальная креативность
    do_sample: false  # Детерминированные ответы
    top_p: 0.9
    top_k: 50
    repetition_penalty: 1.1

# Настройки векторной базы
vector_store:
  type: "chroma"
  persist_directory: "datasets/sberquad/vector_db"
  collection_name: "sberquad_documents"

# Настройки ретривера (оптимизированные)
retriever:
  k: 10  # Больше документов для полного контекста
  search_type: "similarity"  # Простой поиск по сходству
  fetch_k: 50  # Увеличиваем для лучшего покрытия

# Настройки оценки (расширенные метрики)
evaluation:
  metrics:
    # === ГРУППА 1: КЛАССИЧЕСКИЕ МЕТРИКИ ГЕНЕРАЦИИ ===
    - "rouge"              # ROUGE метрики (для сравнения)
    - "bleu"               # BLEU метрика (для сравнения)
    - "exact_match"        # Точное совпадение
    
    # === ГРУППА 2: СЕМАНТИЧЕСКИЕ МЕТРИКИ ===
    - "cosine_similarity"  # Семантическое сходство - основная метрика
    
    # === ГРУППА 3: RAG-СПЕЦИФИЧНЫЕ МЕТРИКИ ===
    - "keyword_overlap"    # Процент совпадающих ключевых слов
    - "contains_ground_truth"  # Содержит ли ответ эталон
    - "partial_match"      # Частичное совпадение
    - "answer_completeness"  # Полнота ответа
    - "information_density"  # Плотность информации
    
    # === ГРУППА 4: ТЕХНИЧЕСКИЕ МЕТРИКИ ===
    - "length_ratio"       # Соотношение длин
  batch_size: 2  # Увеличиваем для эффективной обработки 100 семплов
  save_predictions: true
  max_samples: 100  # Эксперимент с группированными метриками на 100 семплах

# Настройки MLflow
mlflow:
  experiment_name: "RAG_GPU_Optimal_Experiments"
  tracking_uri: "file:./mlruns"
  log_artifacts: true
  log_models: true

# Настройки веб-интерфейса
web:
  interface: "gradio"
  port: 7860
  host: "0.0.0.0"
  share: false

# Настройки логирования
logging:
  level: "INFO"
  format: "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
  file: "logs/rag_gpu_optimal_experiment.log"

# Настройки производительности
performance:
  use_gpu: true
  gpu_memory_fraction: 0.9  # Используем 90% GPU памяти
  enable_mixed_precision: true
  cache_embeddings: true
