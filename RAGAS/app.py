"""
–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è RAG —Å–∏—Å—Ç–µ–º—ã.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–∫ Gradio, —Ç–∞–∫ –∏ Streamlit –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã.
"""

import os
import sys
import yaml
import logging
import argparse
from pathlib import Path
from typing import Dict, Any, Optional, List

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from src.pipeline import RAGPipeline, create_rag_pipeline

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class RAGWebApp:
    """–ö–ª–∞—Å—Å –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ RAG —Å–∏—Å—Ç–µ–º—ã."""
    
    def __init__(self, config_path: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
        
        Args:
            config_path: –ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        self.config_path = config_path
        self.config = self._load_config()
        self.pipeline = None
        self.web_config = self.config.get('web', {})
        
    def _load_config(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ YAML —Ñ–∞–π–ª–∞."""
        try:
            with open(self.config_path, 'r', encoding='utf-8') as f:
                config = yaml.safe_load(f)
            logger.info(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑: {self.config_path}")
            return config
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            raise
    
    def initialize_pipeline(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç RAG –ø–∞–π–ø–ª–∞–π–Ω."""
        try:
            logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG –ø–∞–π–ø–ª–∞–π–Ω–∞...")
            self.pipeline = create_rag_pipeline(self.config)
            self.pipeline.initialize()
            logger.info("RAG –ø–∞–π–ø–ª–∞–π–Ω –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞–π–ø–ª–∞–π–Ω–∞: {e}")
            raise
    
    def query_pipeline(self, question: str) -> Dict[str, Any]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –ø–∞–π–ø–ª–∞–π–Ω—É.
        
        Args:
            question: –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            Dict[str, Any]: –û—Ç–≤–µ—Ç –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        """
        if not self.pipeline:
            return {
                "answer": "–û—à–∏–±–∫–∞: –ü–∞–π–ø–ª–∞–π–Ω –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω",
                "source_documents": [],
                "error": "Pipeline not initialized"
            }
        
        try:
            return self.pipeline.query(question, return_sources=True)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return {
                "answer": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}",
                "source_documents": [],
                "error": str(e)
            }
    
    def get_pipeline_info(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–π–ø–ª–∞–π–Ω–µ."""
        if not self.pipeline:
            return {"status": "not_initialized"}
        
        return {
            "status": "initialized",
            "vector_store_info": self.pipeline.get_vector_store_info(),
            "stats": self.pipeline.get_stats(),
            "model_info": {
                "embedding_model": "sentence-transformers/paraphrase-multilingual-mpnet-base-v2",
                "generator_model": "rag",
                "device": "cuda"
            }
        }


def create_gradio_interface(app: RAGWebApp):
    """–°–æ–∑–¥–∞–µ—Ç Gradio –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å."""
    import gradio as gr
    
    def process_query(question: str, history: List[List[str]]) -> tuple:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        if not question.strip():
            return history, "", ""
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        result = app.query_pipeline(question)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        answer = result.get("answer", "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞")
        response_time = result.get("response_time", 0)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö
        sources_text = ""
        if result.get("source_documents"):
            sources_text = "**–ò—Å—Ç–æ—á–Ω–∏–∫–∏:**\n\n"
            for i, doc in enumerate(result["source_documents"], 1):
                content = doc.get("content", "")[:200] + "..." if len(doc.get("content", "")) > 200 else doc.get("content", "")
                metadata = doc.get("metadata", {})
                source = metadata.get("source", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫")
                sources_text += f"{i}. **{source}**\n{content}\n\n"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        history.append([question, answer])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
        info_text = f"–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {response_time:.2f} —Å–µ–∫"
        
        return history, sources_text, info_text
    
    def get_system_info():
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ."""
        info = app.get_pipeline_info()
        
        if info["status"] == "not_initialized":
            return "–°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞"
        
        vector_info = info["vector_store_info"]
        stats = info["stats"]
        
        info_text = f"""
**–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ:**
- –°—Ç–∞—Ç—É—Å: {info["status"]}
- –¢–∏–ø –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã: {vector_info.get("type", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")}
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {vector_info.get("document_count", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")}
- –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats.get("total_queries", 0)}
- –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {stats.get("avg_response_time", 0):.2f} —Å–µ–∫
        """
        
        return info_text.strip()
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    with gr.Blocks(title="RAG –°–∏—Å—Ç–µ–º–∞", theme=gr.themes.Soft()) as interface:
        gr.Markdown("# ü§ñ RAG –°–∏—Å—Ç–µ–º–∞ –¥–ª—è –í–æ–ø—Ä–æ—Å–æ–≤ –∏ –û—Ç–≤–µ—Ç–æ–≤")
        gr.Markdown("–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å, –∏ —Å–∏—Å—Ç–µ–º–∞ –Ω–∞–π–¥–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç.")
        
        with gr.Row():
            with gr.Column(scale=2):
                # –ß–∞—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                chatbot = gr.Chatbot(
                    label="–î–∏–∞–ª–æ–≥",
                    height=400,
                    show_label=True
                )
                
                with gr.Row():
                    question_input = gr.Textbox(
                        placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å...",
                        label="–í–æ–ø—Ä–æ—Å",
                        lines=2
                    )
                    submit_btn = gr.Button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å", variant="primary")
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
                response_info = gr.Textbox(
                    label="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—Ä–æ—Å–µ",
                    interactive=False,
                    lines=1
                )
            
            with gr.Column(scale=1):
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
                system_info = gr.Textbox(
                    label="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ",
                    value=get_system_info(),
                    interactive=False,
                    lines=10
                )
                
                # –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                refresh_btn = gr.Button("–û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
                
                # –ò—Å—Ç–æ—á–Ω–∏–∫–∏
                sources_output = gr.Textbox(
                    label="–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
                    interactive=False,
                    lines=15
                )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        def submit_question(question, history):
            return process_query(question, history)
        
        submit_btn.click(
            fn=submit_question,
            inputs=[question_input, chatbot],
            outputs=[chatbot, sources_output, response_info]
        )
        
        question_input.submit(
            fn=submit_question,
            inputs=[question_input, chatbot],
            outputs=[chatbot, sources_output, response_info]
        )
        
        refresh_btn.click(
            fn=get_system_info,
            outputs=[system_info]
        )
        
        # –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤
        gr.Markdown("### üí° –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:")
        examples = gr.Examples(
            examples=[
                "–ß—Ç–æ —Ç–∞–∫–æ–µ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ?",
                "–ö–∞–∫–∏–µ —Ç–∏–ø—ã –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π —Å—É—â–µ—Å—Ç–≤—É—é—Ç?",
                "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–≥–æ —Å–ø—É—Å–∫–∞?",
                "–ß—Ç–æ —Ç–∞–∫–æ–µ –≥–ª—É–±–æ–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ?",
                "–ö–∞–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –º–æ–¥–µ–ª–µ–π?"
            ],
            inputs=[question_input]
        )
    
    return interface


def create_streamlit_interface(app: RAGWebApp):
    """–°–æ–∑–¥–∞–µ—Ç Streamlit –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å."""
    import streamlit as st
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    st.set_page_config(
        page_title="RAG –°–∏—Å—Ç–µ–º–∞",
        page_icon="ü§ñ",
        layout="wide"
    )
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.title("ü§ñ RAG –°–∏—Å—Ç–µ–º–∞ –¥–ª—è –í–æ–ø—Ä–æ—Å–æ–≤ –∏ –û—Ç–≤–µ—Ç–æ–≤")
    st.markdown("–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å, –∏ —Å–∏—Å—Ç–µ–º–∞ –Ω–∞–π–¥–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç.")
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–∏—Å—Ç–µ–º–µ
    with st.sidebar:
        st.header("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ")
        
        info = app.get_pipeline_info()
        
        if info["status"] == "not_initialized":
            st.error("–°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        else:
            vector_info = info["vector_store_info"]
            stats = info["stats"]
            
            st.metric("–°—Ç–∞—Ç—É—Å", info["status"])
            st.metric("–¢–∏–ø –ë–î", vector_info.get("type", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"))
            st.metric("–î–æ–∫—É–º–µ–Ω—Ç–æ–≤", vector_info.get("document_count", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"))
            st.metric("–ó–∞–ø—Ä–æ—Å–æ–≤", stats.get("total_queries", 0))
            st.metric("–°—Ä. –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞", f"{stats.get('avg_response_time', 0):.2f} —Å–µ–∫")
            
            if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"):
                st.rerun()
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    col1, col2 = st.columns([2, 1])
    
    with col1:
        # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –≤–æ–ø—Ä–æ—Å–∞
        question = st.text_area(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ß—Ç–æ —Ç–∞–∫–æ–µ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ?",
            height=100
        )
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
        if st.button("üîç –ù–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç", type="primary"):
            if question.strip():
                with st.spinner("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—à –∑–∞–ø—Ä–æ—Å..."):
                    result = app.query_pipeline(question)
                    
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Ç–≤–µ—Ç
                    st.subheader("üí¨ –û—Ç–≤–µ—Ç:")
                    st.write(result.get("answer", "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞"))
                    
                    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
                    response_time = result.get("response_time", 0)
                    st.caption(f"‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {response_time:.2f} —Å–µ–∫—É–Ω–¥")
                    
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
                    if result.get("source_documents"):
                        st.subheader("üìö –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:")
                        for i, doc in enumerate(result["source_documents"], 1):
                            with st.expander(f"–ò—Å—Ç–æ—á–Ω–∏–∫ {i}"):
                                content = doc.get("content", "")
                                metadata = doc.get("metadata", {})
                                source = metadata.get("source", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫")
                                
                                st.write(f"**–§–∞–π–ª:** {source}")
                                st.write(f"**–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:** {content}")
                                
                                if "score" in doc and doc["score"] is not None:
                                    st.write(f"**–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å:** {doc['score']:.4f}")
            else:
                st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å")
    
    with col2:
        # –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤
        st.subheader("üí° –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:")
        
        example_questions = [
            "–ß—Ç–æ —Ç–∞–∫–æ–µ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ?",
            "–ö–∞–∫–∏–µ —Ç–∏–ø—ã –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π —Å—É—â–µ—Å—Ç–≤—É—é—Ç?",
            "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–≥–æ —Å–ø—É—Å–∫–∞?",
            "–ß—Ç–æ —Ç–∞–∫–æ–µ –≥–ª—É–±–æ–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ?",
            "–ö–∞–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –º–æ–¥–µ–ª–µ–π?"
        ]
        
        for i, example in enumerate(example_questions, 1):
            if st.button(f"{i}. {example}", key=f"example_{i}"):
                st.session_state.example_question = example
                st.rerun()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞
        if "example_question" in st.session_state:
            question = st.session_state.example_question
            del st.session_state.example_question
            st.rerun()
    
    # –§—É—Ç–µ—Ä
    st.markdown("---")
    st.markdown("**RAG –°–∏—Å—Ç–µ–º–∞** - Retrieval-Augmented Generation –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    parser = argparse.ArgumentParser(description='RAG Web Application')
    parser.add_argument('--config', type=str, default='config/base_config.yaml',
                       help='–ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É')
    parser.add_argument('--interface', type=str, choices=['gradio', 'streamlit'],
                       help='–¢–∏–ø –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é)')
    parser.add_argument('--port', type=int, help='–ü–æ—Ä—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞')
    parser.add_argument('--host', type=str, default='0.0.0.0', help='–•–æ—Å—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞')
    parser.add_argument('--share', action='store_true', help='–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º (—Ç–æ–ª—å–∫–æ –¥–ª—è Gradio)')
    
    args = parser.parse_args()
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        app = RAGWebApp(args.config)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞–π–ø–ª–∞–π–Ω
        app.initialize_pipeline()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        interface_type = args.interface or app.web_config.get('interface', 'gradio')
        
        if interface_type == 'gradio':
            # –ó–∞–ø—É—Å–∫–∞–µ–º Gradio –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            import gradio as gr
            
            interface = create_gradio_interface(app)
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞
            port = args.port or app.web_config.get('port', 7860)
            host = args.host or app.web_config.get('host', '0.0.0.0')
            share = args.share or app.web_config.get('share', False)
            
            logger.info(f"–ó–∞–ø—É—Å–∫ Gradio –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –Ω–∞ {host}:{port}")
            interface.launch(
                server_name=host,
                server_port=port,
                share=share,
                show_error=True
            )
            
        elif interface_type == 'streamlit':
            # –ó–∞–ø—É—Å–∫–∞–µ–º Streamlit –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            import streamlit as st
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            create_streamlit_interface(app)
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞
            port = args.port or app.web_config.get('port', 8501)
            host = args.host or app.web_config.get('host', '0.0.0.0')
            
            logger.info(f"–ó–∞–ø—É—Å–∫ Streamlit –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –Ω–∞ {host}:{port}")
            
            # Streamlit –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É streamlit run
            print(f"–î–ª—è –∑–∞–ø—É—Å–∫–∞ Streamlit –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
            print(f"streamlit run app.py -- --config {args.config} --interface streamlit")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()

